// Taildown Interactive Components
// Generated by Taildown compiler
// Total size: ~2.25KB

(function() {
  'use strict';

  console.log('[Taildown] JavaScript loaded');

  // Initialize all components when DOM is ready
  if (document.readyState === 'loading') {
    console.log('[Taildown] Waiting for DOMContentLoaded');
    document.addEventListener('DOMContentLoaded', init);
  } else {
    console.log('[Taildown] DOM already ready, initializing now');
    init();
  }

  function init() {
    console.log('[Taildown] Initializing interactive components');
    // Modal Component
    // Find all modal trigger buttons
    document.querySelectorAll('[data-modal-trigger]').forEach(trigger => {
      const modalId = trigger.getAttribute('data-modal-trigger');
      const modal = document.getElementById(modalId);
      
      if (!modal) return;
      
      const closeButtons = modal.querySelectorAll('[data-modal-close]');
      const backdrop = modal;
      
      let isOpen = false;
      let previousFocus = null;
      
      // Open modal
      function open() {
        if (isOpen) return;
        
        previousFocus = document.activeElement;
        isOpen = true;
        modal.hidden = false;
        modal.setAttribute('aria-hidden', 'false');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Fade in animation
        requestAnimationFrame(() => {
          modal.style.opacity = '1';
        });
        
        // Focus first focusable element (skip close button)
        const focusable = modal.querySelectorAll('button:not([data-modal-close]), [href], input, select, textarea');
        if (focusable.length > 0) {
          setTimeout(() => focusable[0].focus(), 100);
        }
      }
      
      // Close modal
      function close() {
        if (!isOpen) return;
        
        isOpen = false;
        modal.style.opacity = '0';
        
        setTimeout(() => {
          modal.hidden = true;
          modal.setAttribute('aria-hidden', 'true');
          modal.style.display = 'none';
          document.body.style.overflow = '';
          
          // Restore focus
          if (previousFocus) {
            previousFocus.focus();
            previousFocus = null;
          }
        }, 200);
      }
      
      // Trigger button click
      trigger.addEventListener('click', (e) => {
        e.preventDefault();
        open();
      });
      
      // Close buttons
      closeButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          close();
        });
      });
      
      // Backdrop click
      backdrop.addEventListener('click', (e) => {
        if (e.target === backdrop) {
          close();
        }
      });
      
      // Escape key
      document.addEventListener('keydown', (e) => {
        if (isOpen && e.key === 'Escape') {
          close();
        }
      });
      
      // Initialize
      modal.hidden = true;
      modal.setAttribute('aria-hidden', 'true');
      modal.style.display = 'none';
      modal.style.opacity = '0';
      modal.style.transition = 'opacity 200ms ease-in-out';
    });

    // Tooltip Component
    getComponents('tooltip').forEach(wrapper => {
      const trigger = wrapper.querySelector('[data-tooltip-trigger]');
      const tooltip = wrapper.querySelector('[data-tooltip-content]');
      
      if (!trigger || !tooltip) return;
      
      let isVisible = false;
      let hideTimeout = null;
      
      // Show tooltip
      function show() {
        if (isVisible) return;
        
        clearTimeout(hideTimeout);
        isVisible = true;
        tooltip.hidden = false;
        tooltip.style.display = 'block';
        
        // Fade in
        requestAnimationFrame(() => {
          tooltip.style.opacity = '1';
        });
        
        const tooltipId = 'tooltip-' + Math.random().toString(36).substr(2, 9);
        tooltip.id = tooltipId;
        trigger.setAttribute('aria-describedby', tooltipId);
      }
      
      // Hide tooltip
      function hide() {
        clearTimeout(hideTimeout);
        hideTimeout = setTimeout(() => {
          isVisible = false;
          tooltip.style.opacity = '0';
          
          setTimeout(() => {
            tooltip.hidden = true;
            tooltip.style.display = 'none';
          }, 200);
          
          trigger.removeAttribute('aria-describedby');
        }, 100);
      }
      
      // Mouse events
      trigger.addEventListener('mouseenter', show);
      trigger.addEventListener('mouseleave', hide);
      
      // Focus events
      trigger.addEventListener('focus', show);
      trigger.addEventListener('blur', hide);
      
      // Touch support for mobile
      trigger.addEventListener('click', (e) => {
        e.preventDefault();
        if (isVisible) {
          hide();
        } else {
          show();
        }
      });
      
      // Initialize as hidden
      tooltip.hidden = true;
      tooltip.style.display = 'none';
      tooltip.style.opacity = '0';
    });
    console.log('[Taildown] Initialization complete');
  }

  // Utility: Get all elements with data-component attribute
  function getComponents(name) {
    return document.querySelectorAll(`[data-component="${name}"]`);
  }

  // Utility: Toggle class on element
  function toggleClass(el, className, force) {
    el.classList.toggle(className, force);
  }

  // Utility: Set multiple attributes
  function setAttrs(el, attrs) {
    for (const [key, value] of Object.entries(attrs)) {
      el.setAttribute(key, value);
    }
  }
})();
