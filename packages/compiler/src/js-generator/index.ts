/**
 * JavaScript Generator for Taildown
 * 
 * Generates minimal, tree-shaken vanilla JS for interactive components.
 * Only includes code for components actually used in the document.
 * 
 * Philosophy:
 * - Clean, readable ES6+ code
 * - Event delegation for performance
 * - Data attributes for targeting
 * - CSS classes for state management
 * - Minimal footprint (~2-5KB for full-featured pages)
 */

import { tabsBehavior } from './behaviors/tabs';
import { accordionBehavior } from './behaviors/accordion';
import { modalBehavior } from './behaviors/modal';
import { tooltipBehavior } from './behaviors/tooltip';
import { carouselBehavior } from './behaviors/carousel';
import { scrollAnimationsBehavior } from './behaviors/scroll-animations';

/**
 * Component behavior definition
 */
export interface ComponentBehavior {
  /** Component name (matches data-component attribute) */
  name: string;
  /** Vanilla JS code to initialize this component */
  code: string;
  /** Estimated size in bytes */
  size: number;
}

/**
 * Registry of all available component behaviors
 */
const BEHAVIORS: Map<string, ComponentBehavior> = new Map([
  ['tabs', tabsBehavior],
  ['accordion', accordionBehavior],
  ['modal', modalBehavior],
  ['tooltip', tooltipBehavior],
  ['carousel', carouselBehavior],
  ['scroll-animations', scrollAnimationsBehavior],
]);

/**
 * Generate JavaScript code for the given components
 * Only includes code for components that are actually used
 * 
 * @param usedComponents - Set of component names used in the document
 * @returns Minified JavaScript code string
 */
export function generateJavaScript(usedComponents: Set<string>): string {
  const behaviors: ComponentBehavior[] = [];
  
  // Tree-shake: only include behaviors for components actually used
  for (const componentName of usedComponents) {
    const behavior = BEHAVIORS.get(componentName);
    if (behavior) {
      behaviors.push(behavior);
    }
  }
  
  // If no interactive components, return empty string
  if (behaviors.length === 0) {
    return '';
  }
  
  // Build the JavaScript output
  const code = buildJavaScript(behaviors);
  
  return code;
}

/**
 * Build the complete JavaScript file
 * Wraps behaviors in DOMContentLoaded and adds utilities
 */
function buildJavaScript(behaviors: ComponentBehavior[]): string {
  const behaviorCode = behaviors.map(b => b.code).join('\n\n');
  
  return `// Taildown Interactive Components
// Generated by Taildown compiler
// Total size: ~${calculateSize(behaviors)}KB

(function() {
  'use strict';

  console.log('[Taildown] JavaScript loaded');

  // Initialize all components when DOM is ready
  if (document.readyState === 'loading') {
    console.log('[Taildown] Waiting for DOMContentLoaded');
    document.addEventListener('DOMContentLoaded', init);
  } else {
    console.log('[Taildown] DOM already ready, initializing now');
    init();
  }

  function init() {
    console.log('[Taildown] Initializing interactive components');
${indent(behaviorCode, 4)}
    console.log('[Taildown] Initialization complete');
  }

  // Utility: Get all elements with data-component attribute
  function getComponents(name) {
    return document.querySelectorAll(\`[data-component="\${name}"]\`);
  }

  // Utility: Toggle class on element
  function toggleClass(el, className, force) {
    el.classList.toggle(className, force);
  }

  // Utility: Set multiple attributes
  function setAttrs(el, attrs) {
    for (const [key, value] of Object.entries(attrs)) {
      el.setAttribute(key, value);
    }
  }
})();
`;
}

/**
 * Indent code by specified spaces
 */
function indent(code: string, spaces: number): string {
  const prefix = ' '.repeat(spaces);
  return code.split('\n').map(line => line ? prefix + line : line).join('\n');
}

/**
 * Calculate total size of behaviors in KB
 */
function calculateSize(behaviors: ComponentBehavior[]): string {
  const bytes = behaviors.reduce((sum, b) => sum + b.size, 0);
  return (bytes / 1024).toFixed(2);
}

/**
 * Get list of all available interactive components
 */
export function getInteractiveComponents(): string[] {
  return Array.from(BEHAVIORS.keys());
}

/**
 * Check if a component has interactive behavior
 */
export function hasInteractiveBehavior(componentName: string): boolean {
  return BEHAVIORS.has(componentName);
}


